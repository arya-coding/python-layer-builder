AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless Application for building python Lambda Layers in Lambda

Metadata:
  AWS::ServerlessRepo::Application:
    Name: python%layer-label%-layer-builder
    Author: Pete Davis
    Description: >
      Serverless Application for building python %python-version-desc% %architecture% Lambda Layers in Lambda
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md 
    Labels: ['layer', 'lambda', 'python']
    HomePageUrl: https://github.com/peterjdavis/python-layer-builder
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/peterjdavis/python-layer-builder

Parameters:
  LayerName:
    Description: The name of the layer to be created
    Type: String

  LayerPackages:
    Description: The list of packages to be deployed using the same format as pip https://packaging.python.org/en/latest/tutorials/installing-packages/#use-pip-for-installing
    Type: String

Resources:
  LayerBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import cfnresponse
        import os
        import shutil
        import boto3
        import logging

        LAYER_NAME = os.environ['LAYER_NAME']
        LAYER_PACKAGES = os.environ['LAYER_PACKAGES']
        PYTHON_VERSION = os.environ['PYTHON_VERSION']
        ARCHITECTURE = os.environ['ARCHITECTURE']

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        lambda_client = boto3.client('lambda')

        def lambda_handler(event, context):
            responseData = {}
            if event['RequestType'] == 'Delete':
                try:
                    delete_layer()
                    responseData = {'success': 'true'}
                except Exception as e:
                    responseData = {'error': str(e)}
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                    return
            if event['RequestType'] == 'Create':
                try:
                    layer_version_arn = build_layer()
                    responseData['LayerVersionArn'] = layer_version_arn
                except Exception as e:
                    responseData = {'error': str(e)}
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                    return
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

        def build_layer():
            os.system(f'cd /tmp; python -m venv {LAYER_NAME}/python; source {LAYER_NAME}/python/bin/activate; python -m pip install {LAYER_PACKAGES}')
            shutil.make_archive(f'/tmp/{LAYER_NAME}', 'zip', f'/tmp/{LAYER_NAME}')
            with open(f'/tmp/{LAYER_NAME}.zip', 'rb') as layer_zip:
                response = lambda_client.publish_layer_version(
                    LayerName=LAYER_NAME,
                    Content={
                        'ZipFile': layer_zip.read()
                    },
                    CompatibleRuntimes=[
                        PYTHON_VERSION
                    ],
                    CompatibleArchitectures=[
                        ARCHITECTURE,
                    ]
                )
            return (response['LayerVersionArn'])

        def delete_layer():
            response = lambda_client.list_layer_versions(
                LayerName=LAYER_NAME
            )

            for layer_version in response['LayerVersions']:
                logger.info(f'Deleting layer version {layer_version["Version"]}')
                response = lambda_client.delete_layer_version(
                    LayerName=LAYER_NAME,
                    VersionNumber=layer_version['Version']
                )
                logger.info(f'Delete response: {response}')

      Handler: index.lambda_handler
      Runtime: python%python-version-desc%
      Architectures: 
        - %architecture%
      MemorySize: 2048
      Timeout: 60
      Environment:
        Variables:
          LAYER_NAME: !Ref LayerName
          LAYER_PACKAGES: !Ref LayerPackages
          PYTHON_VERSION: python%python-version-desc%
          ARCHITECTURE: %architecture%
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action: 
                - lambda:PublishLayerVersion
                - lambda:DeleteLayerVersion
                - lambda:ListLayerVersions
              Resource: '*'

  LayerBuilderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${LayerBuilderFunction}

  LayerBuilderVersionArn:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub ${LayerBuilderFunction.Arn}

Outputs:
  LayerVersionArn:
    Description: ARN for the layer version that has been created
    Value: !Sub ${LayerBuilderVersionArn.LayerVersionArn}
    
