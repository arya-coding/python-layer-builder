AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Application for building python Lambda Layers in Lambda
Metadata:
  AWS::ServerlessRepo::Application:
    Name: python3-11-arm64-layer-builder
    Author: Pete Davis
    Description: 'Serverless Application for building python 3.11 arm64 Lambda Layers
      in Lambda

      '
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://python-layer-builder/86d3f3a95c324c9479bd8986968f4327
    ReadmeUrl: s3://python-layer-builder/a9d7b1a6d1c7a475812e916d8eb21320
    Labels:
    - layer
    - lambda
    - python
    HomePageUrl: https://github.com/peterjdavis/python-layer-builder
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/peterjdavis/python-layer-builder
Parameters:
  LayerName:
    Description: The name of the layer to be created
    Type: String
  LayerPackages:
    Description: The list of packages to be deployed using the same format as pip
      https://packaging.python.org/en/latest/tutorials/installing-packages/#use-pip-for-installing
    Type: String
Resources:
  LayerBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "import cfnresponse\nimport os\nimport shutil\nimport boto3\nimport\
        \ logging\n\nLAYER_NAME = os.environ['LAYER_NAME']\nLAYER_PACKAGES = os.environ['LAYER_PACKAGES']\n\
        PYTHON_VERSION = os.environ['PYTHON_VERSION']\nARCHITECTURE = os.environ['ARCHITECTURE']\n\
        \nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nlambda_client\
        \ = boto3.client('lambda')\n\ndef lambda_handler(event, context):\n    responseData\
        \ = {}\n    if event['RequestType'] == 'Delete':\n        try:\n         \
        \   delete_layer()\n            responseData = {'success': 'true'}\n     \
        \   except Exception as e:\n            responseData = {'error': str(e)}\n\
        \            cfnresponse.send(event, context, cfnresponse.FAILED, responseData)\n\
        \            return\n    if event['RequestType'] == 'Create':\n        try:\n\
        \            layer_version_arn = build_layer()\n            responseData['LayerVersionArn']\
        \ = layer_version_arn\n        except Exception as e:\n            responseData\
        \ = {'error': str(e)}\n            cfnresponse.send(event, context, cfnresponse.FAILED,\
        \ responseData)\n            return\n    cfnresponse.send(event, context,\
        \ cfnresponse.SUCCESS, responseData)\n\ndef build_layer():\n    os.system(f'cd\
        \ /tmp; python -m venv {LAYER_NAME}/python; source {LAYER_NAME}/python/bin/activate;\
        \ python -m pip install {LAYER_PACKAGES}')\n    shutil.make_archive(f'/tmp/{LAYER_NAME}',\
        \ 'zip', f'/tmp/{LAYER_NAME}')\n    with open(f'/tmp/{LAYER_NAME}.zip', 'rb')\
        \ as layer_zip:\n        response = lambda_client.publish_layer_version(\n\
        \            LayerName=LAYER_NAME,\n            Content={\n              \
        \  'ZipFile': layer_zip.read()\n            },\n            CompatibleRuntimes=[\n\
        \                PYTHON_VERSION\n            ],\n            CompatibleArchitectures=[\n\
        \                ARCHITECTURE,\n            ]\n        )\n    return (response['LayerVersionArn'])\n\
        \ndef delete_layer():\n    response = lambda_client.list_layer_versions(\n\
        \        LayerName=LAYER_NAME\n    )\n\n    for layer_version in response['LayerVersions']:\n\
        \        logger.info(f'Deleting layer version {layer_version[\"Version\"]}')\n\
        \        response = lambda_client.delete_layer_version(\n            LayerName=LAYER_NAME,\n\
        \            VersionNumber=layer_version['Version']\n        )\n        logger.info(f'Delete\
        \ response: {response}')\n"
      Handler: index.lambda_handler
      Runtime: python3.11
      Architectures:
      - arm64
      MemorySize: 2048
      Timeout: 60
      Environment:
        Variables:
          LAYER_NAME:
            Ref: LayerName
          LAYER_PACKAGES:
            Ref: LayerPackages
          PYTHON_VERSION: python3.11
          ARCHITECTURE: arm64
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:PublishLayerVersion
          - lambda:DeleteLayerVersion
          - lambda:ListLayerVersions
          Resource: '*'
    Metadata:
      SamResourceId: LayerBuilderFunction
  LayerBuilderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${LayerBuilderFunction}
    Metadata:
      SamResourceId: LayerBuilderFunctionLogGroup
  LayerBuilderVersionArn:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::Sub: ${LayerBuilderFunction.Arn}
    Metadata:
      SamResourceId: LayerBuilderVersionArn
Outputs:
  LayerVersionArn:
    Description: ARN for the layer version that has been created
    Value:
      Fn::Sub: ${LayerBuilderVersionArn.LayerVersionArn}
